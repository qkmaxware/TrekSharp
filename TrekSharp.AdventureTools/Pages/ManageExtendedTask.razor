@page "/manage/task/extended"
@inherits Page

<LCARS Title="EXTENDED TASKS">
    <div class="w3-padding row-fill">
        @foreach (var task in Data.Tasks) {
            var capture = task;
            <div class="container">
                <!-- Title -->
                <div class="row">
                    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                    <span class="spacer typeface text-secondary w3-large">
                        @capture?.Name?.ToUpper()
                    </span>
                    <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
                </div>
                <!-- Progress -->
                <div class="w3-row w3-padding">
                    <div class="hbar elbow-left knee-left w3-padding w3-quarter secondary lcars-border-secondary">
                        <span>Breakthroughs</span>
                    </div>
                    <div class="w3-threequarter lcars-border-secondary typeface w3-padding w3-right-align" style="padding-left: 10px">
                        @capture.Breakthroughs / @capture.Difficulty
                    </div>
                </div>
                <div class="w3-row w3-padding">
                    <div class="hbar elbow-left knee-left w3-padding w3-quarter secondary lcars-border-secondary">
                        <span>Work Track</span>
                    </div>
                    <div class="w3-threequarter lcars-border-secondary typeface w3-padding w3-right-align" style="padding-left: 10px">
                        @(capture.WorkTrack - capture.TotalWork) / @capture.WorkTrack
                    </div>
                </div>
                <div class="w3-row w3-padding">
                    <div class="w3-row w3-col s8">
                        <div class="w3-col" style="width: 64px;">
                            <button style="width: 100%; font-size: medium; border-radius: 20px 0 0 20px;" class="lcars-border-secondary" @onclick=@(() => capture.ApplyRollsAgainst())>+ work</button>
                        </div>
                        <div class="w3-rest">
                            <input style="width: 100%;" class="lcars-border-secondary" @bind=task.RollsAgainst></input>
                        </div>
                    </div>
                    <div class="w3-col s4 w3-right-align">
                        <button class="w3-red" style="font-size: medium;" @onclick=@(() => DeleteTask(capture))>&times;</button>
                    </div>
                </div>
            </div>
        }
        <div class="w3-right-align">
            <button @onclick="NewTask">
                + Task
            </button>
        </div>
    </div>
</LCARS>

<Popup @ref="creationPopup">
    @if (customTask != null) {
    <div>
        <div class="row">
            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
            <span class="spacer typeface text-secondary w3-large">
                EXTENDED TASK
            </span>
            <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
        </div>
        <div>
            <div class="w3-row w3-padding">
                <div class="hbar elbow-left knee-left w3-padding-large w3-quarter">
                    <span>Name</span>
                </div>
                <div class="w3-threequarter" style="padding-left: 10px">
                    <input type="text" class="w3-input" @bind=customTask.Name placeholder="Name"/>
                </div>
            </div>
            <div class="w3-row w3-padding">
                <div class="hbar elbow-left knee-left w3-padding-large w3-quarter">
                    <span>Work Track</span>
                </div>
                <div class="w3-threequarter" style="padding-left: 10px">
                    <input type="number" class="w3-input" @bind=customTask.WorkTrack placeholder="Size"/>
                </div>
            </div>
            <div class="w3-row w3-padding">
                <div class="hbar elbow-left knee-left w3-padding-large w3-quarter">
                    <span>Difficulty</span>
                </div>
                <div class="w3-threequarter" style="padding-left: 10px">
                    <input type="number" class="w3-input" @bind=customTask.Difficulty placeholder="Difficulty"/>
                </div>
            </div>
            <div class="w3-row w3-padding">
                <div class="hbar elbow-left knee-left w3-padding-large w3-quarter">
                    <span>Magnitude</span>
                </div>
                <div class="w3-threequarter" style="padding-left: 10px">
                    <input type="number" class="w3-input" @bind=customTask.Magnitude placeholder="Magnitude"/>
                </div>
            </div>
            <div class="w3-row w3-padding">
                <div class="hbar elbow-left knee-left w3-padding-large w3-quarter">
                    <span>Resistance</span>
                </div>
                <div class="w3-threequarter" style="padding-left: 10px">
                    <input type="number" class="w3-input" @bind=customTask.Resistance placeholder="Resistance"/>
                </div>
            </div>
        </div>
    </div>
    }
    <div class="w3-row">
        <div class="w3-col s6">
            <button class="w3-button w3-red" @onclick="closeCreateExtendedTask">Cancel</button>
        </div>
        <div class="w3-col s6 w3-right-align">
            <button class="w3-button w3-green" @onclick="addCreateExtendedTask">Add</button>
        </div>
    </div>
</Popup>

@code {

    private Popup creationPopup;
    ExtendedTask customTask = null;
    private void openCreateExtendedTask() {
        customTask = new ExtendedTask("New Extended Task", difficulty: 1, workTrackSize: 20, magnitude: 3, resistance: 0);
        creationPopup.Open();
    }
    private void closeCreateExtendedTask() {
        creationPopup.Close();
        customTask = null;
    }
    private void addCreateExtendedTask() {
        if (customTask != null) {
            this.Data.Tasks.Add(customTask);
        }
        closeCreateExtendedTask();
    }

    private void NewTask() {
        openCreateExtendedTask();
    }
    private void DeleteTask(ExtendedTask task) {
        Data.Tasks.Remove(task);
    }

}