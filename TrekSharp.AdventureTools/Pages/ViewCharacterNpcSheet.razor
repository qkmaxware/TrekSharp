@page "/manage/characters/npc/{EncounterId}/{ListId}/{PlayerId}"
@inherits Page

@if (HasCharacter) {
<PrintNotification/>

<div class="w3-container no-print lcars" style="text-align: right;">
    <button @onclick="confirmDelete" class="w3-red">Delete</button>
</div>

<div id="character-sheet" class="lcars">
    <!-- Header -->
    <div id="player-info" class="container">
        <div class="row">
            <div class="primary" style="width: calc(100% - 290px); max-width: 120px;">
                <img src="assets/starfleet.svg" style="display: block; width: 60%; height: auto; margin-left: auto; margin-right: auto; margin-top: 32px;">
            </div>
            <div class="w3-padding row-fill">
                <h2 class="w3-right-align text-primary typeface">PERSONNEL RECORD</h2>
                <div class="w3-row">
                    <div class="w3-col w3-right w3-center" style="width: 100px;">
                        @if (Player.Avatar != null) {
                            <MiniDrawer Avatar=Player.Avatar></MiniDrawer>
                            <button class="no-print" style="font-size:medium;" @onclick=createOrEditAvatar>Edit</button>
                        } else {
                            <button class="no-print" style="font-size:medium;" @onclick=createOrEditAvatar>+ Avatar</button>
                        }
                    </div>
                    <div class="w3-rest">
                        <div class="w3-row">
                            <div class="w3-quarter text-secondary typeface">NAME:</div> 
                            <div class="w3-threequarter w3-border-bottom">@Player.Rank @Player.Name</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="hbar elbow-left" style="width: 56px;"></div>
            <div class="hbar row-fill" style="margin-right: 10px;"></div>
            <div class="hbar" style="width: 240px; max-width: calc(100% - 130px);"></div>
        </div>
    </div>
    <!-- Body -->
    <LCARS PrintBorders=true>
        <!-- Content -->
        <div class="w3-row row-fill">
            <SplitLayout>
                <Left>
                    <InjuryDrawer Player="Player"/>
                    <AttributeDrawer @ref=attributes Attributes="Player.Attributes" Selectable=true OnAttributeClick=onAttributeClick/>
                    <DisciplineDrawer @ref=disciplines Disciplines="Player.Disciplines" Selectable=true OnDisciplineClick=onDisciplineClick/>
                    <ListDrawer Title="VALUES" List="Player.Values"/>
                </Left>
                <Right>
                    <FocusDrawer Focuses="Player.Focuses"/>
                    <EquipmentDrawer Player="Player" AllowEdit=true OnChallengeDieClicked=clickChallengeDie/>
                    <ListDrawer Title="SPECIAL RULES" List="Player.SpecialRules"/>
                </Right>
            </SplitLayout>
        </div>
    </LCARS>
</div>
} else {
    <span>No npc "@(PlayerId)"</span>
}

<ConfirmationDialog @ref="confirm">
</ConfirmationDialog>

@if (diceSelectedAttribute != null || diceSelectedDiscipline != null) {
<div style="position: fixed; bottom: 12px; left: 0; right: 0;" class="noselect w3-center">
    <div class="w3-red w3-round-xxlarge w3-large w3-center w3-container w3-padding" style="display: inline-block" @onclick=tryRollTaskDice>
        <button class="w3-button w3-circle w3-dark-grey no-lcars" @onclick=clearDice>
            &times;
        </button>
        Roll
        @if (diceSelectedAttribute != null) {
            <span>@diceSelectedAttribute.Name</span>
        } else {
            <span>?</span>
        } 
        + 
        @if (diceSelectedDiscipline != null) {
            <span>@diceSelectedDiscipline.Name</span>
        } else {
            <span>?</span>
        }
    </div>
</div>
}
@if (challengeDieCount > 0) {
<div style="position: fixed; bottom: 12px; left: 0; right: 0;" class="noselect w3-center">
    <div class="w3-red w3-round-xxlarge w3-large w3-center w3-container w3-padding" style="display: inline-block" @onclick=tryRollChallengeDie>
        <button class="w3-button w3-circle w3-dark-grey no-lcars" @onclick=clearDice>
            &times;
        </button>
        Roll @challengeDieCount <img src="assets/challenge-effect.png" width=22 height=22 />
    </div>
</div>   
}
<Popup @ref="dicePopup" OnOpen=@(() => diceRoller?.RerollAll())>
    <DiceRoller @ref="diceRoller"></DiceRoller>
    <div class="w3-center">
        <button @onclick=closeDicePopup>close</button>
    </div>
</Popup>


@code {

    private ConfirmationDialog confirm;

    [Parameter] public string PlayerId { get; set; }
    [Parameter] public string EncounterId {get; set;}
    [Parameter] public string ListId {get; set;}

    public int PlayerIndex {
        get {
            int index;
            if (int.TryParse(PlayerId, out index)) {
                return index;
            } else {
                return -1;
            }
        }
    }

    private Encounter Encounter {
        get {
            var e = EncounterId;
            var encounter = Data.Encounters.Where(en => en.GUID == e).FirstOrDefault();
            return encounter;
        }
    }
    public NpcCharacter Player {
        get {
            var p = PlayerIndex;
            var encounter = Encounter;
            if (encounter == null) {
                return null;
            }
            if (ListId == "ally") {
                if (p < 0 || p >= encounter.AlliedInfrantry.Count) {
                    return null;
                } else {
                    return encounter.AlliedInfrantry[p];
                }
            } else if (ListId == "enemy") {
                if (p < 0 || p >= encounter.EnemyInfantry.Count) {
                    return null;
                } else {
                    return encounter.EnemyInfantry[p];
                }
            } else {
                return null;
            }
        }
    }
    public bool HasCharacter => Player != null;

    public override string PageTitle => Player?.Name;

    private void confirmDelete() {
        confirm.Open($"Are you sure you want to delete the character '{this.Player.Name}'?", () => Delete());
    }

    private void createOrEditAvatar() {
        NavigateToMini(this.Player);
    }

    public void Delete() {
        if (HasCharacter) {
            if (ListId == "ally") {
                Encounter?.AlliedInfrantry.Remove(this.Player);
            }
            else if (ListId == "enemy") {
                Encounter?.EnemyInfantry.Remove(this.Player);
            }
            NavigationManager.NavigateTo("manage/encounters");
        }
    }

    #region Quick Dice Roller
    private Popup dicePopup;
    private DiceRoller diceRoller;
    AttributeDrawer attributes;
    DisciplineDrawer disciplines;
    private int challengeDieCount;
    private void clearDice() {
        challengeDieCount = 0;
        diceSelectedAttribute = null;
        diceSelectedDiscipline = null;
    }
    private void clickChallengeDie(Item weapon) {
        diceSelectedAttribute = null;
        diceSelectedDiscipline = null;
        challengeDieCount = weapon.DamageDice.Value + this.Player.BonusDamageDice;
        StateHasChanged();
    }
    private void tryRollChallengeDie(){
        diceRoller.ClearDicePool();
        diceRoller.UpdateTargetScore(null, null);
        diceRoller.AddChallengeDie(challengeDieCount);
        dicePopup.Open();
        challengeDieCount = 0;
    }
    private AttributeReference diceSelectedAttribute;
    private void onAttributeClick(AttributeReference attr) {
        challengeDieCount = 0;
        if(diceSelectedAttribute != null && diceSelectedAttribute.Index == attr.Index) {
            diceSelectedAttribute = null;
        } else {
            diceSelectedAttribute = attr;
        }
        StateHasChanged();
    }
    private DisciplineReference diceSelectedDiscipline;
    private void onDisciplineClick(DisciplineReference disc) {
        challengeDieCount = 0;
        if(diceSelectedDiscipline != null && diceSelectedDiscipline.Index == disc.Index) {
            diceSelectedDiscipline = null;
        } else {
            diceSelectedDiscipline = disc;
        }
        StateHasChanged();
    }
    private void tryRollTaskDice() {
        if (diceSelectedAttribute != null && diceSelectedDiscipline != null) {
            diceRoller.UpdateTargetScore(diceSelectedAttribute.Value, diceSelectedDiscipline.Value);

            diceSelectedAttribute = null;
            diceSelectedDiscipline = null;

            diceRoller.ClearDicePool();
            diceRoller.AddTaskDie(2);
            dicePopup.Open();
        }
    }
    private void closeDicePopup() {
        dicePopup.Close();
    }
    #endregion

}