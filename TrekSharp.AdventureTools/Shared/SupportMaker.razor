@using System.Globalization
@inherits AppComponentBase
@if(state == State.PickBooks) {
    <RulebookPicker @ref="Rulebooks"></RulebookPicker>
} else if (state == State.PickSpecies) {
<div>
    <div class="row">
        <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
        <span class="spacer typeface text-secondary w3-large">
            SPECIES
        </span>
        <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
    </div>
    <div>
        <div class="w3-right-align w3-padding">
            <input type="text" style="w3-black" placeholder="search" @bind="speciesFilter"/>
        </div>
        @foreach (var s in AllSpecies) {
        <div class="w3-padding w3-margin w3-row w3-border-bottom">
            <div class="w3-half">
                <a href="@(s.GetMemoryAlphaSearchLink())" target="_blank">@s.Name</a>
            </div>
            <div class="w3-half w3-right-align">
                <input type="radio"
                    checked="@(s.Equals(species))" 
                    @onchange="@(() => species = s)" />
            </div>
        </div>
        }
    </div>
</div>
} else if(state == State.PickAttributes) {
    <div class="row">
    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
    <span class="spacer typeface text-secondary w3-large">
        ATTRIBUTES
    </span>
    <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
</div>
<div class="w3-padding w3-margin-bottom">
    <p>
        Click on any 2 attributes to swap their attribute values
    </p>
    @foreach (var a in this.attrs.Enumerate()) {
    <div class="row w3-padding">
        <span class="hbar elbow-left knee-left w3-padding" style="width:256px;">@a.Name</span>
        <span class="row-fill" style="margin-left: 10px;">
            <button class="w3-button @(firstAttr.HasValue && firstAttr.Value == a.Index ? "secondary" : "w3-black")" style="width: 100%" @onclick="@(() => clickAttr(a.Index))">
                @a.Value
            </button>
        </span>
    </div>
    }
</div>

<div class="row">
    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
    <span class="spacer typeface text-secondary w3-large">
        DISCIPLINES
    </span>
    <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
</div>
<div class="w3-padding w3-margin-bottom">
    <p>
        Click on any 2 disciplines to swap their discipline values
    </p>
    @foreach (var a in this.disc.Enumerate()) {
    <div class="row w3-padding">
        <span class="hbar elbow-left knee-left w3-padding" style="width:256px;">@a.Name</span>
        <span class="row-fill" style="margin-left: 10px;">
            <button class="w3-button @(firstDisc.HasValue && firstDisc.Value == a.Index ? "secondary" : "w3-black")" style="width: 100%" @onclick="@(() => clickDisc(a.Index))">
                @a.Value
            </button>
        </span>
    </div>
    }
</div>
} else if (state == State.Finalize) {
<div class="row">
    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
    <span class="spacer typeface text-secondary w3-large">
        PERSONNEL PROFILE
    </span>
    <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
</div>
<div class="w3-padding w3-margin-bottom">
    <p>
        Give the character an appropriate name and rank. Supporting Characters should never have a rank above Lieutenant and may often be enlisted personnel rather than officers.
    </p>
    <div class="row">
        <span class="hbar elbow-left knee-left w3-padding">Name</span>
        <span class="hbar row-fill" style="margin-left: 10px;">
            <input type="text" class="w3-padding" style="width: 100%;" @bind="name"/>
        </span>
    </div>
    <div class="w3-container w3-padding">
        @foreach (var r in ranks) {
            <div class="w3-padding w3-margin w3-row w3-border-bottom">
                <div class="w3-half">
                    <label>@r.Title</label>
                </div>
                <div class="w3-half w3-right-align">
                    <input type="radio" 
                        checked="@(r.Equals(rank))" 
                        @onchange="@(() => rank = r)" />
                </div>
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
    <span class="spacer typeface text-secondary w3-large">
        FOCUSES
    </span>
    <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
</div>
<div class="w3-padding w3-margin-bottom">
    <p>
        Choose three Focuses for the character. At least one should reflect the department/purpose of the character.
    </p>
    <div class="row w3-padding">
        <span class="hbar elbow-left knee-left w3-padding">Focus 1</span>
        <span class="hbar row-fill" style="margin-left: 10px;">
            <input type="text" class="w3-padding" style="width: 100%;" @bind="focus1"/>
        </span>
    </div>
    <div class="row w3-padding">
        <span class="hbar elbow-left knee-left w3-padding">Focus 2</span>
        <span class="hbar row-fill" style="margin-left: 10px;">
            <input type="text" class="w3-padding" style="width: 100%;" @bind="focus2"/>
        </span>
    </div>
    <div class="row w3-padding">
        <span class="hbar elbow-left knee-left w3-padding">Focus 3</span>
        <span class="hbar row-fill" style="margin-left: 10px;">
            <input type="text" class="w3-padding" style="width: 100%;" @bind="focus3"/>
        </span>
    </div>
</div>
}

<div class="w3-row">
    <div class="w3-half">
        @if (!FirstState()) {
            <button style="button" @onclick="GoBack"> Back </button>
        }
    </div>
    <div class="w3-half w3-right-align">
        @if (!LastState()) {
            <button style="button" @onclick="Next"> Next </button>
        } else {
            <button style="button" @onclick="Save"> Save </button>
            <button style="button" @onclick="Export"> Export JSON </button>
        }
    </div>
</div>

@code {
    enum State {
        PickBooks,
        PickSpecies,
        PickAttributes,
        Finalize
    }
    private State state = State.PickBooks;

    private void GoBack() {
        if (!FirstState()) {
            state = (State)((int)state - 1);
        }
    }
    private bool FirstState() {
        return state == State.PickBooks;
    }
    private bool LastState() {
        return state == State.Finalize;
    }
    private void Next() {
        if (!LastState()) {
            state = (State)((int)state + 1);
        }
    }

    private RulebookPicker Rulebooks;
    private IEnumerable<Species> AllSpecies => Rulebooks.EnabledRulebooks
                                            .SelectMany(book => book.Species)
                                            .Where(species => 
                                                string.IsNullOrEmpty(speciesFilter) 
                                                || CultureInfo.InvariantCulture.CompareInfo.IndexOf(species.Name, speciesFilter, CompareOptions.IgnoreCase) >= 0);

    private string name;
    private Rank rank = Rank.Lieutenant;
    private string speciesFilter;
    private Species species;
    private string focus1;
    private string focus2;
    private string focus3;

    private int? firstAttr = null;
    private void clickAttr(int index) {
        if (!firstAttr.HasValue) {
            firstAttr = index;
        } else {
            var temp = attrs[firstAttr.Value];
            attrs[firstAttr.Value] = attrs[index];
            attrs[index] = temp;
            firstAttr = null;
        }
    }
    private int? firstDisc = null;
    private void clickDisc(int index) {
        if (!firstDisc.HasValue) {
            firstDisc = index;
        } else {
            var temp = disc[firstDisc.Value];
            disc[firstDisc.Value] = disc[index];
            disc[index] = temp;
            firstDisc = null;
        }
    }

    private Attributes attrs = new Attributes {
        Control  = 10,
        Fitness  = 9,
        Presence = 9,
        Daring   = 8,
        Insight  = 8,
        Reason   = 7,
    };
    private Disciplines disc = new Disciplines {
        Command     = 4,
        Security    = 3,
        Science     = 2,
        Conn        = 2,
        Engineering = 1,
        Medicine    = 1,
    };

    private IEnumerable<Rank> ranks {
        get {
            yield return Rank.Ensign;
            yield return Rank.LieutenantJuniorGrade;
            yield return Rank.Lieutenant;
        }
    }

    public SupportCharacter FinalCharacter {
        get {
            var a = new Attributes();
            a.Add(species.AttributeModifiers);
            a.Add(attrs);

            var d = new Disciplines();
            d.Add(disc);

            return new SupportCharacter {
                Name = name,
                Rank = rank,
                Species = species,
                Focuses = new List<string>{
                    focus1,
                    focus2,
                    focus3
                },
                Attributes = a,
                Disciplines = d,
                Equipment = new List<Item> {
                    Rulebook.Core.Items[0],
                    Rulebook.Core.Items[1],
                    Rulebook.Core.Items[2],
                    Rulebook.Core.Items[3],
                    Rulebook.Core.Items[4]
                }
            };
        }
    }

    private void Save() {
        Data.Supports.Add(FinalCharacter);
        var id = Data.Supports.Count - 1;
        NavigationManager.NavigateTo($"/manage/characters/support/{id}");
    }

    public async Task Export() {
        var c = this.FinalCharacter;
        await this.DownloadJson($"{c.Name}.character", c);
    }
}