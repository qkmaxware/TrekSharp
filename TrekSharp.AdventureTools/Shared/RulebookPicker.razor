@using Data
@inject AppData data;

<div class="row">
    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
    <span class="spacer typeface text-secondary w3-large">
        SOURCES
    </span>
    <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
</div>
<div class="w3-padding w3-margin-bottom">
    <div class="w3-right">
        <button style="font-size: medium;" @onclick="EnableAll">All</button>
        <button style="font-size: medium;" @onclick="DisableAll">None</button>
    </div>
    <div>
        <b>Official</b>
    </div>
    <div class="w3-margin-left w3-margin-top w3-margin-bottom">
    @foreach (var kv in Rulebooks.AllRulebooks) {
        if (!(kv.Value is UnofficialRulebook) && kv.Value is BaseRulebook) {
            <button class="button @(Rulebooks.IsRulebookEnabled(kv.Key) ? "primary" : "secondary") mobile-medium mobile-full" @onclick="@(() => Toggle(kv.Key))">@kv.Key</button>
        }
    }
    </div>
    <div>
        <b>Unofficial</b>
    </div>
    <div class="w3-margin-left w3-margin-top w3-margin-bottom">
    @foreach (var kv in Rulebooks.AllRulebooks) {
        if (kv.Value is UnofficialRulebook || !(kv.Value is BaseRulebook)) {
            <button class="button @(Rulebooks.IsRulebookEnabled(kv.Key) ? "primary" : "secondary") mobile-medium mobile-full" @onclick="@(() => Toggle(kv.Key))">@kv.Key</button>
        }
    }
    </div>
</div>

@code {

    private RulebookContainer Rulebooks = new RulebookContainer();

    public Action OnChange;

    public IEnumerable<IRulebook> EnabledRulebooks => Rulebooks.EnabledRulebooks;

    protected override void OnInitialized() {
        // Add the user created data to the rulebook picker
        Rulebooks.AddRulebook("Homebrew", new HomebrewRulebook(data));
    }

    private void Toggle(string name) {
        Rulebooks.ToggleRulebook(name);
        if (OnChange != null)
            OnChange();
    }

    private void EnableAll() {
        foreach (var book in Rulebooks.AllRulebooks) {
            Rulebooks.UseRulebook(book.Key);
        }
        if (OnChange != null)
            OnChange();
    }

    private void DisableAll() {
        foreach (var book in Rulebooks.AllRulebooks) {
            Rulebooks.DoNotUseRulebook(book.Key);
        }
        if (OnChange != null)
            OnChange();
    }

}