@using TrekSharp.AdventureTools.Shared.Dice3d;

<div>
    <div class="lcars">
        <div class="row">
            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                DICE 
            </div>
            <div class="hbar row-fill"></div>
        </div>
    </div>

    <div class="w3-row w3-padding lcars-primary lcars-elbow-left lcars-elbow-right w3-margin-left w3-margin-right">
        <div class="w3-col s7 w3-text-white">
            <button class="w3-button w3-display-container no-lcars" style="padding:4px 4px;" @onclick=@(() => AddChallengeDie(1))>
                <img src="assets/d6.png" width=40 height=40 />
                <img class="w3-display-middle" src="assets/challenge-effect.png" width="40" height="40">
            </button>
            <button class="w3-button w3-display-container no-lcars" style="padding:4px 4px;" @onclick=@(() => AddD6(1))>
                <img src="assets/d6.png" width=40 height=40 />
                <div class="w3-display-middle">
                    6
                </div>
            </button>
            <button class="w3-button w3-display-container no-lcars" style="padding:4px 4px;" @onclick=@(() => AddTaskDie(1))>
                <img src="assets/d20.png" width=40 height=40 />
                <div class="w3-display-middle">
                    20
                </div>
            </button>
        </div>
        <div class="w3-col s5 w3-right-align" style="font-size: medium;">
            <button class="w3-button w3-round-xxlarge w3-red no-lcars" @onclick=RerollAll>
                Roll
                <button class="w3-button w3-circle w3-dark-grey no-lcars" @onclick=clear>
                    &times;
                </button>
            </button>
        </div>
    </div>

    <div class="w3-padding noselect">
        @foreach (var die in this.dices) {
            <div style="padding: 8px; display: inline-block;">
            @if (die is ChallengeDice cd) {
                <DiceChallenge dice=cd OnDiceRoll=StateHasChanged></DiceChallenge>
            } else if (die is D6 d6) {
                <DiceD6 dice=d6 OnDiceRoll=StateHasChanged></DiceD6>
            } else if (die is D20 d20) {
                <DiceD20 dice=d20 OnDiceRoll=StateHasChanged></DiceD20>
            }
            </div>
        }
    </div>

    <div class="lcars w3-margin-left w3-margin-right w3-row">
        <div class="@panelCss w3-padding">
            <div class="secondary elbow-left elbow-right knee-left knee-right"><b>Total:</b> @Total</div>
        </div>
        
        @if (TargetScore.HasValue) {
        <div class="@panelCss w3-padding">
            <div class="secondary elbow-left elbow-right knee-left knee-right"><b>Successes:</b> @SuccessesWithoutFocus <small>(+@(SuccessesWithFocus - SuccessesWithoutFocus) with focus)</small></div>
        </div>
        }
        @if (hasChallengeDie) {
        <div class="@panelCss w3-padding">
            <div class="secondary elbow-left elbow-right knee-left knee-right"><b>Effects:</b> @Effects</div>
        </div>
        }
    </div>

</div>

@code {

    private List<Dice> dices = new List<Dice>();

    private int panels => 1 + (TargetScore.HasValue ? 1 : 0) + (hasChallengeDie ? 1 : 0);
    private string panelCss {
        get {
            var number = panels;
            if (number < 2) {
                return string.Empty;
            } else if (number == 2) {
                return "w3-half";
            } else {
                return "w3-third";
            }
        }
    }

    [Parameter]
    public int? AttributeScore {get; set;} = null;
    [Parameter]
    public int? DisciplineScore {get; set;} = null;
    public int? TargetScore => AttributeScore.HasValue && DisciplineScore.HasValue ? (int?)(AttributeScore.Value + DisciplineScore.Value) : null;
    public void UpdateTargetScore(int? attr, int? discipline) {
        this.AttributeScore = attr;
        this.DisciplineScore = discipline;
    }
    private bool hasChallengeDie => dices.OfType<ChallengeDice>().Any(); 

    private int Total => dices.Select(dice => dice.NumericValue).Sum();
    private int Effects => dices.OfType<ChallengeDice>().Where(dice => dice.ChallengeValue == ChallengeDiceResult.Effect).Count();
    private int SuccessesWithoutFocus => !TargetScore.HasValue ? 0 : dices.OfType<D20>().Select(dice => dice.NumericValue <= TargetScore.Value ? (dice.NumericValue == 1 ? 2 : 1) : 0).Sum(); 
    private int SuccessesWithFocus => !TargetScore.HasValue ? 0 : dices.OfType<D20>().Select(dice => dice.NumericValue <= TargetScore.Value ? (dice.NumericValue <= DisciplineScore.Value ? 2 : 1) : 0).Sum(); 

    private string getDiceImage(Dice dice) {
        return dice switch {
            D20 d20 => "assets/d20.png",
            _ => "assets/d6.png",
        };
    }

    private void clear() {
        dices.Clear();
    }

    public void RerollAll() {
        foreach (var dice in dices) {
            dice.Roll();
        }
        StateHasChanged();
    }

    private void rerollDice(Dice dice) {
        dice.Roll();
        StateHasChanged();
    }

    public void ClearDicePool() {
        this.dices.Clear();
        StateHasChanged();
    }

    public void AddChallengeDie(int count = 1) {   
        for (var i = 0; i < count; i++) {
            var die = new ChallengeDice();
            dices.Add(die);
        }
    }

    public void AddD6(int count = 1) {
        for (var i = 0; i < count; i++) {
            var die = new D6();
            dices.Add(die);
        }
    }

    public void AddTaskDie(int count = 1) {
        for (var i = 0; i < count; i++) {
            var die = new D20();
            dices.Add(die);
        }
    }

}