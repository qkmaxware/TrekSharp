@using System.Globalization

@if (RequireDelete && DeletedTalent == null) { 
    <div class="row">
        <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
        <span class="spacer typeface text-secondary w3-large">
            REPLACE A TALENT
        </span>
        <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
    </div>
    <p>
        Select one talent to be replaced with a new talent.
    </p>
    @if(GetPlayer() == null) {
        <span>ERROR No Character</span>
    } else {
        foreach (var talent in GetPlayer().Talents) {
            <div class="w3-padding w3-margin w3-row w3-border-bottom">
                <div class="w3-third">
                    <label>@talent.Name</label>
                </div>
                <div class="w3-third">
                    @talent.Description
                    &nbsp;
                </div>
                <div class="w3-third w3-right-align">
                    <input type="radio" 
                        checked="@(talent.Equals(DeletedTalent))" 
                        @onchange="@(() => DeletedTalent = talent)" />
                </div>
            </div>
        }
    }
} else {
<RulebookPicker @ref=Books></RulebookPicker>

<div class="row">
    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
    <span class="spacer typeface text-secondary w3-large">
        TALENTS
    </span>
    <div class="hbar row-fill elbow-right knee-right" style="margin-right: 10px;"></div>
</div>
<div class="w3-container w3-padding">
    <div class="w3-right-align w3-padding">
        <input type="text" style="w3-black" placeholder="search" @bind="talentFilter"/>
        <button @onclick=@(() => StateHasChanged())>Refresh</button>
    </div>
    @if(GetPlayer() == null) {
        <span>ERROR No Character</span>
    }
    @foreach (var talent in allTalents()) {
    <div class="w3-padding w3-margin w3-row w3-border-bottom">
        <div class="w3-third">
            <label>@talent.Name</label>
        </div>
        <div class="w3-third">
            @talent.Description
            &nbsp;
        </div>
        <div class="w3-third w3-right-align">
            <input type="radio" 
                checked="@(talent.Equals(SelectedTalent))" 
                @onchange="@(() => SelectedTalent = talent)" />
        </div>
    </div>
    }
</div>
}

@code {

    [Parameter] public bool RequireDelete {get; set;} = false;
    public CharacterTalent DeletedTalent;
    [Parameter] public Func<PlayerCharacter> GetPlayer {get; set;}
    private RulebookPicker Books;
    private string talentFilter = null;
    public CharacterTalent SelectedTalent;

    private IEnumerable<CharacterTalent> allTalents() {
        var @char = this.GetPlayer(); // Cached once across entire filter
        var books = Books?.EnabledRulebooks;
        if (@char == null || books == null) {
            return Enumerable.Empty<CharacterTalent>();
        } 
        return books
            .SelectMany(book => book.Talents)
            .Where(talent =>
                @char != null && talent.CanBeUsedBy(@char)                 // Character can use talent (species or skill rating restrictions)
                //&& !characterTalents.Contains(talent)   // Character does not already have this talent
                && (
                    string.IsNullOrEmpty(talentFilter) 
                    || CultureInfo.InvariantCulture.CompareInfo.IndexOf(talent.Name, talentFilter, CompareOptions.IgnoreCase) >= 0
                )
            ); 
    }

}