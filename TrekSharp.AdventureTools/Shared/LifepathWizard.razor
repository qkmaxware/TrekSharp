<Wizard AllowBacktracking=false OnWizardComplete=onWizardDone>
    <WizardStage>
        <Content>
            <p>
                Select which sources are to be used for character creation. Different sources can have different species, talents, or character backgrounds. Adding more sources creates more options for customization. 
            </p>
            <p>
                Your Game-Master may restict which sources are allowed to be used as some sources may not make sence with the scenario that they are crafting. Always confirm with your GM which sources are allowed.
            </p>
            <RulebookPicker @ref="sources"></RulebookPicker>
        </Content>
    </WizardStage>
    <WizardStage ValidatationFunction=requireSpecies>
        <Content>
            <p>
                Select the species which your character is a member of. Different species have different initial attributes and are allowed to access special talents.
            </p>
            <ListSelect @ref="speciesSelector" Title="SPECIES" List=species Filterable=true OnSelectionChanged=StateHasChanged>
                <Info>
                    <LCARS>
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                @context.Name
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-margin-bottom w3-margin-top" style="width: 100%; height: 125px;">
                            <img src="@context.GetSpeciesImageUrl()" onerror="this.src='assets/artwork/species/Unknown.png'" style="display: block; margin-left: auto; margin-right: auto;width: 100%; max-height:125px; width: auto;">
                        </div>
                        
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                Attributes
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-container w3-margin-bottom">
                            @if (context.AttributeModifiers != null) {
                                foreach (var attr in context.AttributeModifiers.Enumerate()) {
                                    <div>@attr.Name +@attr.Value</div>
                                }
                            } else {
                                <p>
                                    This species has no default attributes.
                                </p>
                            }
                        </div>
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                Details
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-container">
                            @if (context is CustomSpecies cs) {
                                <span>
                                    @cs.Description
                                </span>
                            } else {
                                <div class="w3-center">
                                    For species information see <a href="@(context.GetMemoryAlphaSearchLink())" target="_blank">Memory Alpha</a>.
                                </div>
                            }
                        </div>
                    </LCARS>
                </Info>
            </ListSelect>
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <p>
               Many characters have parents from different species. Mixed-heritage species are treated as a member of the primary species taking more features from one parent than from the other, but inherits the traits of and can choose the talents avaliable for the other species. This step is optional as you may choose to <b>not</b> have a character be of mixed-heritage.
            </p>
            <div class="w3-center w3-padding">
                <button @onclick=toggleMixedHeritage>@(useMixed ? "Do Not Use" : "Use") Mixed Heritage</button>
            </div>
            @if (useMixed) {
            <ListSelect @ref="speciesSecondarySelector" Title="MIXED HERITAGE" List=species Filterable=true OnSelectionChanged=StateHasChanged></ListSelect>
            }
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <div class="row">
                <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                    SPECIES ATTRIBUTES
                </div>
                <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
            </div>
            @if (characterPrimarySpecies.AttributeModifiers == null) {
            <p>
                This species has no default attributes, choose 3 attributes to increase.
            </p>
            <AttributeIncrement 
                Points="3" 
                MaxPointsPerItem="1"
                Mask="attributeMaskAll"
                Reference="characterCustomSpeciesAttributes"
            ></AttributeIncrement>
            } else {
                <p>
                    This species has the following default attributes
                </p>
                foreach (var attr in characterPrimarySpecies.AttributeModifiers.Enumerate()) {
                    <div class="row w3-margin-bottom">
                        <div class="hbar elbow-left knee-left secondary" style="width: 16px;"></div>
                        <div class="hbar w3-padding typeface secondary" style="width: 112px;">
                            @attr.Name
                        </div>
                        <div class="hbar row-fill w3-black" style="margin-left: 10px; padding-right: 25px;">
                            + @attr.Value
                        </div>
                    </div>
                }
            }
        </Content>
    </WizardStage>
    <WizardStage ValidatationFunction=hasFirstTalent>
        <Content>
            <p>
                Select your character's first talent. 
            </p>
            <ListSelect @ref="speciesTalentSelector" Title="FIRST TALENT" List=validTalents() Filterable=true OnSelectionChanged=StateHasChanged>
                <Info>
                    <LCARS>
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                @context.Name
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-container">
                            @context.Description
                        </div>
                    </LCARS>
                </Info>
            </ListSelect>
        </Content>
    </WizardStage>
    <WizardStage ValidatationFunction=hasEnvironment>
        <Content>
            <p>
                Select an environment for your character to have grown up in. Environments represent where your character was born and how they spent their early years. 
            </p>
            <ListSelect @ref=environmentSelect Title="ENVIRONMENT" List=environments Filterable=true OnSelectionChanged=StateHasChanged>
                <Info>
                    <LCARS>
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                @context.Name
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-container">
                            @context.Description
                        </div>
                        @if ((context.AttributeSelectionMask ?? characterPrimarySpecies.AttributeModifiers ?? characterCustomSpeciesAttributes) != null) {
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                Available Attributes
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-container">
                            @foreach (var item in (context.AttributeSelectionMask ?? characterPrimarySpecies.AttributeModifiers ?? characterCustomSpeciesAttributes).Enumerate()){
                                if (item.Value > 0) {
                                    <div>@item.Name</div>
                                }
                            }
                        </div>
                        }
                        @if(context.DisciplineSelectionMask != null) {
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                Available Disciplines
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-container">
                            @foreach (var item in context.DisciplineSelectionMask.Enumerate()){
                                if (item.Value > 0) {
                                    <div>@item.Name</div>
                                }
                            }
                        </div>
                        }
                    </LCARS>
                </Info>
            </ListSelect>
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <div class="row">
                <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                    @characterEnvironment?.Name
                </div>
                <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
            </div>
            <p>
                @characterEnvironment?.Description
            </p>
            <div class="w3-padding">
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        ATTRIBUTES
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <AttributeIncrement 
                        Points="1" 
                        Mask="characterEnvironment.AttributeSelectionMask ?? characterPrimarySpecies.AttributeModifiers ?? characterCustomSpeciesAttributes"
                        Reference="characterEnvironmentAttributes"
                        />
                </div>
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        DISCIPLINES
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <DisciplineIncrement 
                        Points="1" 
                        Mask="characterEnvironment.DisciplineSelectionMask"
                        Reference="characterEnvironmentDisciplines"
                        />
                </div>
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        VALUE
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    This Value should reflect the environment and culture the character was raised within. This is a good opportunity to consider how the character views their own culture, and how they connect — or possibly, don’t connect — to the philosophies and traditions of their people.
                    <br>
                    <input type="text" style="width: 100%" @bind="characterEnvironmentValue"/>
                </div>
            </div>
        </Content>
    </WizardStage>
    <WizardStage ValidatationFunction=hasUpbringing>
        <Content>
            <p> 
                Select an upbrining for your character. Upbrinings represent the potential values and skills your character would have been experienced to while in their formative years. Your character may choose to embrace this upbrining or reject it.
            </p>
            <ListSelect @ref=upbringingSelect Title="UPBRINGING" List=upbringings Filterable=true OnSelectionChanged=StateHasChanged>
                <Info>
                    <LCARS>
                        <div class="row">
                            <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                            <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                @context.Name
                            </div>
                            <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                        </div>
                        <div class="w3-container">
                            @context.Description
                        </div>
                    </LCARS>
                </Info>
            </ListSelect>
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <div class="row">
                <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                    @characterUpbringing?.Name?.ToUpper()
                </div>
                <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
            </div>
            <p>
                @characterUpbringing?.Description
            </p>
            <div class="w3-padding">
                <div class="w3-margin-bottom">
                    Do you EMBRACE or REBEL against your upbringing?<br>
                    <input class="w3-check" type="radio" 
                        checked="@(characterAcceptsUpbringing == true)" 
                        @onchange="@(() => characterAcceptsUpbringing = true)" 
                    />
                    <label>Embrace</label>
                    <br>
                    <input class="w3-check" type="radio" 
                        checked="@(characterAcceptsUpbringing == false)" 
                        @onchange="@(() => characterAcceptsUpbringing = false)" 
                    />
                    <label>Rebel</label>
                </div>
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        ATTRIBUTES
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    @foreach (var attr in characterUpbringingAttributes.Enumerate()) {
                        if (attr.Value > 0) {
                            <div class="row w3-margin-bottom">
                                <div class="hbar elbow-left knee-left secondary" style="width: 32px;"></div>
                                <div class="hbar w3-padding typeface secondary" style="width: 96px;">
                                    @attr.Name
                                </div>
                                <div class="hbar row-fill w3-black" style="margin-left: 10px;">
                                    +@attr.Value
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        DISCIPLINES
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <DisciplineIncrement 
                        Points="1" 
                        Mask="characterUpbringing.DisciplineMask"
                        Reference="characterUpbringingDisciplines"
                        />
                </div>
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        FOCUS
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <p>
                        The character’s Focus should relate to their connection to their upbringing, covering skills learned during the character’s formative years.
                    </p>
                    <input type="text" style="width: 100%" @bind="characterUpbringingFocus"/>
                </div> 
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        TALENT
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <ListSelect @ref="upbringingTalentSelect" List=validTalents() Filterable=true OnSelectionChanged=StateHasChanged>
                        <Info>
                            <LCARS>
                                <div class="row">
                                    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                                    <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                        @context.Name
                                    </div>
                                    <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                                </div>
                                <div class="w3-container">
                                    @context.Description
                                </div>
                            </LCARS>
                        </Info>
                    </ListSelect>
                </div>
            </div>
        </Content>
    </WizardStage>
    <WizardStage ValidatationFunction=hasCareerTrack>
        <Content>
            <p>
                Select a track to attend at Starfleet Academy. While all cadets will come out of the academy with a wide range of skills and knowledge, different tracks will provide your character with slightly different areas of expertiese. 
            </p>
            <ListSelect @ref=trackSelect Title="ACADEMY TRACK" List=tracks Filterable=false OnSelectionChanged=StateHasChanged>
            </ListSelect>
        </Content>
    </WizardStage>
    <WizardStage ValidatationFunction=hasCareerTalent>
        <Content>
            <div class="row">
                <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                    @characterCareerTrack.Value.ToString().ToUpper()
                </div>
                <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
            </div>
            <p>
                @if (characterCareerTrack.Value == CareerTrack.Command) {
                    <span>The Command track is for those cadets who aspire to command their own starship someday. It focuses on leadership and interpersonal skills, diplomacy, decisionmaking in crisis situations, an understanding of protocol and procedure, and starship operations, which includes flight control.</span>
                } else if (characterCareerTrack.Value == CareerTrack.Operations) {
                    <span>The Operations track is practical and hands-on, dealing with many of the realities of Starfleet’s mission. Divided broadly into engineering and security divisions, operations track cadets are defined by a sense of pragmatism, whether that applies to the technical or the tactical.</span>
                } else if (characterCareerTrack.Value == CareerTrack.Sciences) {
                    <span>Somewhat isolated from the other Tracks, the Sciences track is primarily academic, with Starfleet Academy producing many accomplished scientists. Included within the sciences track, but separated by a distinct curriculum, is Starfleet Medical, training doctors, nurses, and counselors to serve aboard Starfleet vessels and facilities across the Federation.</span>
                }
            </p>
            <div class="w3-padding">
                <div style="w3-padding">
                    <div class="row">
                        <div class="hbar w3-padding typeface">
                            ATTRIBUTES (PICK 3)
                        </div>
                        <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                    </div>
                    <div class="w3-container w3-padding">
                        <AttributeIncrement 
                            Points="3"
                            MaxPointsPerItem="2" 
                            Mask="attributeMaskAll"
                            Reference="characterCareerPathAttributes"
                            OnChange=@(() => StateHasChanged())
                            />
                    </div>
                </div>

                <div style="w3-padding">
                    <div class="row">
                        <div class="hbar w3-padding typeface">
                            MAJOR (PICK 1)
                        </div>
                        <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                    </div>
                    <div class="w3-container w3-padding">
                        @if (characterCareerTrack.Value == CareerTrack.Command) {
                            <DisciplineIncrement 
                                Points="1"
                                Increment="2"
                                Mask="commandMajorsMask"
                                Reference="characterCareerPathMajorDisciplines"
                                OnChange="@(() => { minorDisciplineComponent.UpdateMask(createMinorMask()); StateHasChanged(); })"
                                />
                        } else if (characterCareerTrack.Value == CareerTrack.Operations) {
                            <DisciplineIncrement 
                                Points="1"
                                Increment="2"
                                Mask="opsMajorsMask"
                                Reference="characterCareerPathMajorDisciplines"
                                OnChange="@(() => { minorDisciplineComponent.UpdateMask(createMinorMask()); StateHasChanged(); })"
                                />
                        } else if (characterCareerTrack.Value == CareerTrack.Sciences) {
                            <DisciplineIncrement 
                                Points="1"
                                Increment="2"
                                Mask="scienceMajorsMask"
                                Reference="characterCareerPathMajorDisciplines"
                                OnChange="@(() => { minorDisciplineComponent.UpdateMask(createMinorMask()); StateHasChanged(); })"
                                />
                        }
                    </div>
                </div>

                <div style="w3-padding">
                    <div class="row">
                        <div class="hbar w3-padding typeface">
                            MINORS (PICK 2)
                        </div>
                        <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                    </div>
                    <div class="w3-container w3-padding">
                        <DisciplineIncrement 
                                Points="2"
                                MaxPointsPerItem="1"
                                Mask="createMinorMask()"
                                Reference="characterCareerPathMinorDisciplines"
                                @ref="minorDisciplineComponent"
                                OnChange=@(() => StateHasChanged())
                                />
                    </div>
                </div>

                <div class="row">
                    <div class="hbar w3-padding typeface">
                        FOCUSES
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <p>
                        Select three focuses for your character, at least one reflecting the time at Starfleet Academy.
                    </p>
                    <input type="text" style="width: 100%" @bind="characterCareerFocus1"/>
                    <input type="text" style="width: 100%" @bind="characterCareerFocus2"/>
                    <input type="text" style="width: 100%" @bind="characterCareerFocus3"/>
                </div>

                <div class="row">
                    <div class="hbar w3-padding typeface">
                        VALUE
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <p>
                        The character gains a single Value, which should reflect some aspect of the character’s beliefs that developed during their time at the Academy.
                    </p>
                    <input type="text" style="width: 100%" @bind="characterCareerValue"/>
                </div>

                <div style="w3-padding">
                    <div class="row">
                        <div class="hbar w3-padding typeface">
                            TALENT
                        </div>
                        <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                    </div>
                    <div class="w3-container w3-padding">
                        <ListSelect @ref="careerTalentSelect" List=validTalents() Filterable=true OnSelectionChanged=StateHasChanged>
                            <Info>
                                <LCARS>
                                    <div class="row">
                                        <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                                        <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                            @context.Name
                                        </div>
                                        <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                                    </div>
                                    <div class="w3-container">
                                        @context.Description
                                    </div>
                                </LCARS>
                            </Info>
                        </ListSelect>
                    </div>
                </div>
            </div>
        </Content>
    </WizardStage>
    <WizardStage ValidatationFunction=hasCareerAge>
        <Content>
            <p>
                How experienced is your character as a Starfleet officer. Are you fresh out of the academy, or an well experienced crew memeber?
            </p>
            <ListSelect @ref=experienceSelect Title="CAREER EXPERIENCE" List=experienceAges OnSelectionChanged=StateHasChanged>
            </ListSelect>
            <div class="row">
                <div class="hbar w3-padding typeface">
                    VALUE
                </div>
                <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
            </div>
            <div class="w3-container w3-padding">
                The character receives a Value, which must reflect the character’s experience or lack thereof. 
                <br>
                <input type="text" style="width: 100%" @bind="characterCareerExperienceValue"/>
            </div>
            @if (experience.HasValue && experience.Value == CareerAge.Experienced) {
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        TALENT
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <ListSelect @ref="characterChareerExperienceTalentSelect" List=validTalents() Filterable=true OnSelectionChanged=StateHasChanged>
                        <Info>
                            <LCARS>
                                <div class="row">
                                    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                                    <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                        @context.Name
                                    </div>
                                    <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                                </div>
                                <div class="w3-container">
                                    @context.Description
                                </div>
                            </LCARS>
                        </Info>
                    </ListSelect>
                </div>
            }
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <p>
                Your career is a tapestry of events and experiences, but amongst this, a few will have been pivotal moments in your life. Define which moments of your life are important in retrospect, and what seemed definitive to an ensign in their early 20s may be inconsequential to that same officer decades later.
            </p>
            <p>
                You may choose to select a career event below, or skip it if your character is still too new to have experienced many important events.
            </p>
            <ListSelect @ref=careerEvent1Select Title="CAREER EVENT (1/2)" List=careerEvents Filterable=true OnSelectionChanged=StateHasChanged>
            </ListSelect>
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            @if (characterCareerEvent1 == null) {
                <p>
                    You have chosen to not select a career event, no options are shown, continue to the next step.
                </p>
            } else {
                <div>
                    <div class="row w3-margin-bottom">
                        <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                        <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                            @characterCareerEvent1?.Name
                        </div>
                        <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                    </div>
                    <div class="w3-padding">
                        <div class="row">
                            <div class="hbar w3-padding typeface">
                                ATTRIBUTES
                            </div>
                            <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                        </div>
                        <div class="w3-container w3-padding">
                            <AttributeIncrement 
                                Points="1" 
                                Mask="characterCareerEvent1.AttributeSelectionMask"
                                Reference="characterCareerEventAttributes1"
                                />
                        </div>

                        <div class="row">
                            <div class="hbar w3-padding typeface">
                                DISCIPLINES
                            </div>
                            <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                        </div>
                        <div class="w3-container w3-padding">
                            <DisciplineIncrement 
                                Points="1" 
                                Mask="characterCareerEvent1.DisciplineSelectionMask"
                                Reference="characterCareerEventDisciplines1"
                                />
                        </div>

                        <div class="row">
                            <div class="hbar w3-padding typeface">
                                FOCUS
                            </div>
                            <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                        </div>
                        <div class="w3-container w3-padding">
                            <input type="text" style="width: 100%" @bind="characterCareerEventFocus1"/>
                        </div>
                    </div>
                </div>
            }
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <p>
                You may choose to select another career event below, or skip it if your character is still too new to have experienced many important events.
            </p>
            <ListSelect @ref=careerEvent2Select Title="CAREER EVENT (2/2)" List=careerEvents Filterable=true OnSelectionChanged=StateHasChanged>
            </ListSelect>
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            @if (characterCareerEvent2 == null) {
                <p>
                    You have chosen to not select a career event, no options are shown, continue to the next step.
                </p>
            } else {
                <div>
                    <div class="row w3-margin-bottom">
                        <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                        <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                            @characterCareerEvent2?.Name
                        </div>
                        <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                    </div>
                    <div class="w3-padding">
                        <div class="row">
                            <div class="hbar w3-padding typeface">
                                ATTRIBUTES
                            </div>
                            <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                        </div>
                        <div class="w3-container w3-padding">
                            <AttributeIncrement 
                                Points="1" 
                                Mask="characterCareerEvent2.AttributeSelectionMask"
                                Reference="characterCareerEventAttributes2"
                                />
                        </div>

                        <div class="row">
                            <div class="hbar w3-padding typeface">
                                DISCIPLINES
                            </div>
                            <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                        </div>
                        <div class="w3-container w3-padding">
                            <DisciplineIncrement 
                                Points="1" 
                                Mask="characterCareerEvent2.DisciplineSelectionMask"
                                Reference="characterCareerEventDisciplines2"
                                />
                        </div>

                        <div class="row">
                            <div class="hbar w3-padding typeface">
                                FOCUS
                            </div>
                            <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                        </div>
                        <div class="w3-container w3-padding">
                            <input type="text" style="width: 100%" @bind="characterCareerEventFocus2"/>
                        </div>
                    </div>
                </div>
            }
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <div class="row">
                <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                    EXCESS EXPERIENCE
                </div>
                <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
            </div>
            <div class="w3-padding w3-margin-bottom">
                Re-allocate your character's excess experience to other fields so that no attribute is above @(MaxAttributes) and no discipline above @(MaxDisciplines). 
            </div>

            <div style="w3-padding">
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        ATTRIBUTES
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <AttributeBalancer 
                        MaxValue="MaxAttributes"
                        ToBalance="characterAttributesBeforeRebalance"
                        Reference="characterAttributeRebalance"
                        />
                </div>

                <div class="row">
                    <div class="hbar w3-padding typeface">
                        DISCIPLINES
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <DisciplineBalancer 
                        MaxValue="MaxDisciplines"
                        ToBalance="characterDisciplinesBeforeRebalance"
                        Reference="characterDisciplinesRebalance"
                        />
                </div>
            </div>
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <p>
                Select a final value. This value could be anything. Often this value is used to represent another career event or something that the character believes as a result of their personal relationship with another character or npc. 
            </p>
            <div class="row">
                <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                    PERSONAL VALUE
                </div>
                <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
            </div>
            <div class="w3-container w3-padding">
                <input type="text" style="width: 100%" @bind="characterRelationshipValue"/>
            </div>
        </Content>
    </WizardStage>
    <WizardStage>
        <Content>
            <p>
                 Your character is almost finished. Simply fill out some personal details below and when you are ready you can export the character sheet.
            </p>
            <div class="row">
                <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                    PERSONAL DETAILS
                </div>
                <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
            </div>
            <div class="w3-padding">
                <div class="row">
                    <div class="hbar w3-padding typeface">
                        NAME
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <input type="text" style="width: 100%" @bind="characterName"/>
                </div>

                <div class="row">
                    <div class="hbar w3-padding typeface">
                        RANK
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    <div class="w3-padding">
                        <input class="w3-check" type="checkbox" @bind="IsEnlisted"><label>Non-Commissioned Officer</label>
                    </div>
                    <ListSelect @ref=rankSelect List=RanksByExperience></ListSelect>
                </div>

                <div class="row">
                    <div class="hbar w3-padding typeface">
                        ASSIGNMENT
                    </div>
                    <div class="hbar elbow-right knee-right" style="width: 32px; margin-right: 10px;"></div>
                </div>
                <div class="w3-container w3-padding">
                    Select the role your character has on the starship, starbase, or outpost they service. You should pick a choice that is best suited for your character given your disciplines.
                    <ListSelect @ref=assignmentSelect List=Assignments Stringify=@((val) => val.Key)>
                        <Info>
                            <LCARS>
                                <div class="row">
                                    <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
                                    <div class="typeface" style="margin-left: 10px; margin-right: 10px;">
                                        @context.Key
                                    </div>
                                    <div class="hbar row-fill elbow-right knee-right" style="text-align: right;"></div>
                                </div>
                                <div class="w3-container">
                                    @context.Value
                                </div>
                            </LCARS>
                        </Info>
                    </ListSelect>
                </div>
                
            </div>
        </Content>
    </WizardStage>
</Wizard>

@code {
    #region Events
    [Parameter] public Action<PlayerCharacter> OnCharacterDone {get; set;}
    private void onWizardDone() {
        OnCharacterDone?.Invoke(this.FinalCharacter);
    }
    #endregion

    #region Enums
    enum CareerTrack {
        Command, Operations, Sciences
    }
    private List<CareerTrack> tracks = new List<CareerTrack> {CareerTrack.Command, CareerTrack.Operations, CareerTrack.Sciences};
    enum CareerAge {
        Young, Experienced, Veteran
    }
    #endregion

    #region Sources
    private RulebookPicker sources;
    private IEnumerable<Species> species => sources.EnabledRulebooks.SelectMany(book => book.Species);
    private IEnumerable<TrekSharp.Environment> environments => sources.EnabledRulebooks.SelectMany(book => book.Environments).Concat(
            species.Select(
                s => new TrekSharp.Environment(
                    $"Another Species' Homeworld ({s.Name})", 
                    "The character grew up amonst another species. They might have lives in a small enclave of their own kind, or they may have been orphaned in some mannor. Whatever the situation, the character has a unique perspective on their own species and on those they were rasied alongside.",
                    s.AttributeModifiers, 
                    new Disciplines {
                        Command     = 1,
                        Security    = 1,
                        Science     = 1,
                        Conn        = 1,
                        Engineering = 1,
                        Medicine    = 1,
                    }
                ) 
            )
        );
    private IEnumerable<Upbringing> upbringings => sources.EnabledRulebooks.SelectMany(book => book.Upbringings);
    private IEnumerable<CareerEvent> careerEvents => sources.EnabledRulebooks.SelectMany(book => book.CareerEvents);
    private IEnumerable<CharacterTalent> talents => sources.EnabledRulebooks.SelectMany(book => book.Talents);
    #endregion

    #region Character
    private Attributes characterBaseAttributes = new Attributes (7);
    private Disciplines characterBaseDisciplines = new Disciplines (1);
    private Attributes characterCustomSpeciesAttributes = new Attributes(0);
    private Attributes speciesAttributes => characterPrimarySpecies?.AttributeModifiers ?? characterCustomSpeciesAttributes;

    private Attributes characterCareerPathAttributes = new Attributes();
    private Disciplines characterCareerPathMajorDisciplines = new Disciplines();
    private Disciplines characterCareerPathMinorDisciplines = new Disciplines();
    private string characterCareerFocus1 = null;
    private string characterCareerFocus2 = null;
    private string characterCareerFocus3 = null;
    private string characterCareerValue = null;
    private string characterCareerExperienceValue = null;
    private CharacterTalent caracterCareerAgeTalent => experience switch {
        CareerAge.Young => TrekSharp.Rulebooks.CoreRulebook.Instance.Talents.Where(talent => talent.Name == "Untapped Potential").First(),
        CareerAge.Veteran => TrekSharp.Rulebooks.CoreRulebook.Instance.Talents.Where(talent => talent.Name == "Veteran").First(),
        _ => characterCareerExperienceExperiencedTalent
    };
    private List<CharacterTalent> characterTalents => new List<CharacterTalent>(){
        firstTalent,
        characterUpbringingTalent,
        characterCareerTalent,
        caracterCareerAgeTalent
    };
    private List<string> characterValues => new List<string>() {
        characterEnvironmentValue,
        characterCareerValue,
        characterCareerExperienceValue,
        characterRelationshipValue
    };
    private List<string> characterFocuses => new List<string>() {
        characterUpbringingFocus,
        characterCareerFocus1,
        characterCareerFocus2,
        characterCareerFocus3,
        characterCareerEventFocus1,
        characterCareerEventFocus2,
    };
    private List<Item> characterEquipment = new List<Item>() {
        TrekSharp.Rulebooks.CoreRulebook.Instance.Items.ElementAt(0),
        TrekSharp.Rulebooks.CoreRulebook.Instance.Items.ElementAt(1),
        TrekSharp.Rulebooks.CoreRulebook.Instance.Items.ElementAt(2),
        TrekSharp.Rulebooks.CoreRulebook.Instance.Items.ElementAt(3),
        TrekSharp.Rulebooks.CoreRulebook.Instance.Items.ElementAt(4)
    };
    public PlayerCharacter FinalCharacter {
        get {
            return new PlayerCharacter {
                Name = characterName,
                Rank = characterRank,
                Assignment = characterAssignment,
                // Produces a "pure" species if characterSubspecies is null or empty
                Species = characterPrimarySpecies.DeriveMixedSpecies(characterSubspecies),
                Attributes = characterAttributesAfterRebalance,
                Disciplines = characterDisciplinesAfterRebalance,
                Equipment = characterEquipment,
                Values = characterValues,
                Focuses = characterFocuses,
                Talents = characterTalents,

                Upbringing = characterUpbringing?.Name,
                Environment = characterEnvironment?.Name,
            };
        }
    }
    #endregion

    #region Species
    private ListSelect<Species> speciesSelector;
    private Species characterPrimarySpecies => speciesSelector?.Selected;
    private bool requireSpecies() => speciesSelector?.Selected != null;
    
    private bool useMixed;
    private ListSelect<Species> speciesSecondarySelector;
    private List<Species> characterSubspecies => speciesSecondarySelector?.AllSelected;
    private void toggleMixedHeritage() {
        useMixed = !useMixed;
        if (!useMixed) {
            speciesSecondarySelector?.DeselectAll();
        }
    }
    #endregion

    #region First Talent
    private ListSelect<CharacterTalent> speciesTalentSelector;
    private CharacterTalent firstTalent => speciesTalentSelector?.Selected;
    private IEnumerable<CharacterTalent> validTalents() {
        var @char = this.FinalCharacter; // Cached once across entire filter
        return talents.Where(talent =>
                talent.CanBeUsedBy(@char)                 // Character can use talent (species or skill rating restrictions)
                //&& !characterTalents.Contains(talent)     // Character does not already have this talent
            ); 
    }
    private bool hasFirstTalent() => firstTalent != null;
    #endregion

    #region Environment
    private ListSelect<TrekSharp.Environment> environmentSelect;
    private TrekSharp.Environment characterEnvironment => environmentSelect?.Selected;
    private string characterEnvironmentValue = null;
    private Attributes characterEnvironmentAttributes = new Attributes();
    private Disciplines characterEnvironmentDisciplines = new Disciplines();
    private bool hasEnvironment() => characterEnvironment != null;
    #endregion

    #region Upbringing
    private ListSelect<Upbringing> upbringingSelect;
    private ListSelect<CharacterTalent> upbringingTalentSelect;
    private Upbringing characterUpbringing => upbringingSelect?.Selected;
    private bool hasUpbringing() => characterUpbringing != null;
    public bool characterAcceptsUpbringing = true;
    private Attributes characterUpbringingAttributes => 
        characterUpbringing == null ? null : (
            characterAcceptsUpbringing ? characterUpbringing.AcceptAttributeModifier : characterUpbringing.RejectAttributeModifier
        );
    private Disciplines characterUpbringingDisciplines = new Disciplines();
    private string characterUpbringingFocus = null;
    private CharacterTalent characterUpbringingTalent => upbringingTalentSelect?.Selected;
    #endregion

    #region Career
    private ListSelect<CareerTrack> trackSelect;
    private CareerTrack? characterCareerTrack => trackSelect?.Selected;
    private bool hasCareerTrack() => characterCareerTrack.HasValue;
    private Attributes attributeMaskAll = new Attributes(1);
    private Disciplines commandMajorsMask = new Disciplines {
        Command = 1,
        Conn = 1,
    };
    private Disciplines opsMajorsMask = new Disciplines {
        Engineering = 1,
        Security = 1,
    };
    private Disciplines scienceMajorsMask = new Disciplines {
        Medicine = 1,
        Science = 1,
    };
    private Disciplines createMinorMask () {
        Disciplines mask = new Disciplines(1); // Start with all
        // Remove selected major
        for (var i = 0; i < 6; i++) {
            mask[i] -= this.characterCareerPathMajorDisciplines[i];
        }
        return mask;
    }
    private DisciplineIncrement minorDisciplineComponent;
    private List<CareerAge> experienceAges = new List<CareerAge> { CareerAge.Young, CareerAge.Experienced, CareerAge.Veteran };
    private ListSelect<CareerAge> experienceSelect;
    private CareerAge? experience => experienceSelect?.Selected;
    private bool hasCareerAge() => experience.HasValue;
    private ListSelect<CharacterTalent> characterChareerExperienceTalentSelect;
    private CharacterTalent characterCareerExperienceExperiencedTalent => characterChareerExperienceTalentSelect?.Selected;

    private ListSelect<CharacterTalent> careerTalentSelect;
    private CharacterTalent characterCareerTalent => careerTalentSelect?.Selected;
    private bool hasCareerTalent() => characterCareerTalent != null;
    #endregion

    #region Career Events
    private ListSelect<CareerEvent> careerEvent1Select;
    private string characterCareerEventFocus1;
    private CareerEvent characterCareerEvent1 => careerEvent1Select?.Selected;
    private Attributes characterCareerEventAttributes1 = new Attributes();
    private Disciplines characterCareerEventDisciplines1 = new Disciplines();

    private ListSelect<CareerEvent> careerEvent2Select;
    private string characterCareerEventFocus2;
    private CareerEvent characterCareerEvent2 => careerEvent2Select?.Selected;
    private Attributes characterCareerEventAttributes2 = new Attributes();
    private Disciplines characterCareerEventDisciplines2 = new Disciplines();  

    #endregion

    #region Cleanup
    private int MaxAttributes => experience == CareerAge.Young ? 11 : 12;
    private int MaxDisciplines => experience == CareerAge.Young ? 4 : 5;
    private Attributes characterAttributeRebalance = new Attributes();
    private Disciplines characterDisciplinesRebalance = new Disciplines();
    private Attributes characterAttributesBeforeRebalance {
        get {
            var attr = new Attributes();
            attr.Add(characterBaseAttributes);
            attr.Add(speciesAttributes);
            attr.Add(characterUpbringingAttributes);
            attr.Add(characterEnvironmentAttributes);
            attr.Add(characterCareerPathAttributes);
            attr.Add(characterCareerEventAttributes1);
            attr.Add(characterCareerEventAttributes2);
            return attr;
        }
    }
    private Attributes characterAttributesAfterRebalance {
        get {
            var attr = new Attributes();
            attr.Add(characterAttributesBeforeRebalance);
            attr.Add(characterAttributeRebalance);
            return attr;
        }
    }
    private Disciplines characterDisciplinesBeforeRebalance {
        get {
            var attr = new Disciplines();
            attr.Add(this.characterBaseDisciplines);
            attr.Add(characterEnvironmentDisciplines);
            attr.Add(characterUpbringingDisciplines);
            attr.Add(characterCareerEventDisciplines1);
            attr.Add(characterCareerEventDisciplines2);
            attr.Add(characterCareerPathMajorDisciplines);
            attr.Add(characterCareerPathMinorDisciplines);
            return attr;
        }
    }
    private Disciplines characterDisciplinesAfterRebalance {
        get {
            var attr = new Disciplines();
            attr.Add(characterDisciplinesBeforeRebalance);
            attr.Add(characterDisciplinesRebalance);
            return attr;
        }
    }
    #endregion

    #region Personal Value
    private string characterRelationshipValue;
    #endregion

    #region Personal Details
    private string characterName = null;
    private Rank characterRank => rankSelect?.Selected;
    private ListSelect<Rank> rankSelect;
    private ListSelect<KeyValuePair<string,string>> assignmentSelect;
    private string characterAssignment =>  assignmentSelect != null ? assignmentSelect.Selected.Key : string.Empty;
    public bool IsEnlisted = false;
    private IEnumerable<Rank> RanksByExperience {
        get {
            if (IsEnlisted) {
                if (experience == CareerAge.Young) {
                    yield return Rank.Crewman;
                    yield return Rank.Yeoman;
                    yield return Rank.Specialist3rdClass;
                    yield return Rank.Specialist2ndClass;
                    yield return Rank.Specialist1stClass;
                } else if (experience == CareerAge.Veteran) {
                    yield return Rank.Specialist3rdClass;
                    yield return Rank.Specialist2ndClass;
                    yield return Rank.Specialist1stClass;
                    yield return Rank.PettyOfficer3rd;
                    yield return Rank.PettyOfficer2nd;
                    yield return Rank.PettyOfficer1st;
                } else {
                    yield return Rank.PettyOfficer3rd;
                    yield return Rank.PettyOfficer2nd;
                    yield return Rank.PettyOfficer1st;
                    yield return Rank.ChiefPettyOfficer;
                    yield return Rank.SeniorChiefPettyOfficer;
                    yield return Rank.MasterChief;
                }
            } else {
                if (experience == CareerAge.Young) {
                    yield return Rank.Cadet;
                    yield return Rank.Ensign;
                    yield return Rank.LieutenantJuniorGrade;
                } else if (experience == CareerAge.Veteran) {
                    yield return Rank.LieutenantCommander;
                    yield return Rank.Commander;
                    yield return Rank.Captain;
                    yield return Rank.RearAdmiral;
                    yield return Rank.ViceAdmiral;
                    yield return Rank.Commodore;
                    yield return Rank.FleetAdmiral;
                } else {
                    yield return Rank.LieutenantJuniorGrade;
                    yield return Rank.Lieutenant;
                    yield return Rank.LieutenantCommander;
                    yield return Rank.Commander;
                    yield return Rank.Captain;
                }
            }
        }
    }
    private List<KeyValuePair<string,string>> Assignments = TrekSharp.Assignments.EnumerateAll().Select(a => new KeyValuePair<string,string>(a.Name, a.Description)).ToList();
    
    #endregion

}