@using System.Globalization
@typeparam TItem

<Popup @ref=popup>
    <div class="lcars">
        <div class="secondary elbow-left elbow-right knee-left knee-right">
            <h3>@Title</h3>
        </div>
        <div class="w3-container">
            Click one of the items below to select it, then press "Add" to confirm.
        </div>
    </div>
    <div class="lcars">
        <div class="w3-padding">
            <input type="text" placeholder="filter" @bind="filter" style="width: 100%;"/>
        </div>
        <div>
        @if (Store != null) {
            for (var i = 0; i < Store.Count; i++) {
                var capture = i;
                if (matchesFilter(Store[i])) {
                <button style="width: 100%" class="@(capture == index ? "secondary" : "primary")" @onclick="@(() => index = capture)">
                    @ListingFunction(Store[i])            
                </button>
                }
            }
        }
        </div>
    </div>
    
    <div class="w3-row">
        <div class="w3-col s6">
            <button class="w3-button" @onclick="Close"> Cancel</button>
        </div>
        <div class="w3-col s6 w3-right-align">
            <button class="w3-button" @onclick="add"> Add</button>
        </div>
    </div>
</Popup>

@code {
    private Popup popup;

    [Parameter]
    public string Title {get; set;} = "Add";
    [Parameter]
    public List<TItem> Store {get; set;}
    [Parameter]
    public Action<TItem> OnAdd {get; set;}
    [Parameter]
    public Func<TItem, string> ListingFunction {get; set;} = stringListing;

    // Default listing function
    private static string stringListing (TItem item) {
        return item?.ToString();
    }

    private bool matchesFilter(TItem item) {
        if (filter == null)
            return true;

        var name = ListingFunction(item);
        if (CultureInfo.InvariantCulture.CompareInfo.IndexOf(name, filter, CompareOptions.IgnoreCase) >= 0) {
            return true;
        } else {
            return false;
        }
    }

    private int index = -1;
    private bool hasItem => Store != null && index >= 0 && index < Store.Count;
    private TItem item => hasItem ? Store[index] : default(TItem);

    private string filter;

    public void ChangeAddListener(Action<TItem> action) {
        this.OnAdd = action;
    }

    public void Open() {
        popup.Open();
    }

    public void Close() {
        popup.Close();
    }

    private void add() {
        if (hasItem) {
            Close();
            if (OnAdd != null && item != null) {
                OnAdd(item);
            }
        }
    }
}