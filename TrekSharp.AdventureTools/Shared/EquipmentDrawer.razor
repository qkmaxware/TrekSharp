@using Data
@inherits AppComponentBase

<div class="w3-margin-bottom no-split">
    <div class="row w3-margin-bottom">
        <div class="hbar elbow-left knee-left" style="width: 32px;"></div>
        <div class="typeface @TitleCss" style="margin-left: 10px; margin-right: 10px;">
            EQUIPMENT 
        </div>
        <div class="hbar row-fill elbow-right knee-right"></div>
    </div>
    <div class="w3-row w3-margin-bottom">
        <ul class="w3-ul w3-small">
            @if (Player != null && Player.Equipment != null) {
            foreach (var item in Player.Equipment) {
                var capture = item;
                <li>
                    <span class="w3-button no-print" @onclick=@(() => removeItem(capture))>&times;</span>
                    @capture.Name 
                    @if(capture.Qualities != null && capture.Qualities.Count > 0) {
                        <small>(@string.Join(',', capture.Qualities))</small>
                    }
                    @if (capture.DamageDice.HasValue && capture.DamageDice.Value != 0) {
                        <span class="w3-right noselect" @onclick=@(() => clickChallengeDie(capture))>
                            @(capture.DamageDice.Value + Player.BonusDamageDice) 
                            <img src="assets/challenge-effect.png" width=12 height=12 />
                        </span>
                    }
                    @if(AllowEdit) {

                    }
                </li>
            }
            }
        </ul>
        @if(AllowEdit) {
        <div class="no-print w3-right-align">
            <button @onclick=@(() => itemList?.Open())>+</button>
        </div>
        }
    </div>
</div>

<AssetAddList
    @ref=itemList
    Title="Give Item"
    Store=items
    OnAdd=onAddItem
>
</AssetAddList>

@code {

    private AssetAddList<Item> itemList;
    private List<Item> items;

    [Parameter] public Character Player {get; set;}
    [Parameter] public bool AllowEdit {get; set;} = false;
    [Parameter] public string TitleCss {get; set;} = "";

    [Parameter] public Action<Item> OnChallengeDieClicked {get; set;} = null;

    protected override void OnInitialized() {
        RulebookContainer books = new RulebookContainer();
        books.AddRulebook("Homebrew", new UserCreatedSpeciesRulebook(Data));
        items = books.AllRulebooks.SelectMany(book => book.Value.Items).OrderBy((item) => item.Name).ToList();
    }
    
    private void removeItem(Item item) {
        Player.Equipment.Remove(item);
        StateHasChanged();
    }
    private void onAddItem(Item item) {
        Player.Equipment.Add(item);
        StateHasChanged();
    }
    private void clickChallengeDie(Item item) {
        OnChallengeDieClicked?.Invoke(item);
    }

}